
A Library for Secure Multi-threaded Information Flow in Haskell

This document contains following information
1. Intoduction to source code
2. Software requirement
3. Case study of on-line shopping application


1. Intoduction to Source Code
------------------------------------------------
Lattice.hs 		: generic lattice type class
RLattice.hs		: generic type classes for singleton types
SecureFlow.hs   : input filter mechanism and output security type derivation
Priv.hs			: constructors of code authority 
FlowArrowRef.hs	: arrow interfaces in the library
RefOp.hs		: data type and standard operation for references
Unification.hs	: unification constraints and algorithm
Shopping.hs
ShoppingAttack.hs : case study : on-line shopping application
BidLattice.hs
Bidders.hs 		: case study : bidding simulation


2. Software Requirement
------------------------------------------------

The Glasgow Haskell Compiler (GHC)
http://www.haskell.org/ghc/
Version : 6.4.1


3. On-line Shopping Application
------------------------------------------------

The source code of the case study in implemented in
Shopping.hs(or ShoppingAttack.hs). 
The malicious procedure is called purchase',
while a normal procedure is called purchase.

In directory Secure, internal-timing channels are 
closed by the run-time system in the library.
In Shopping.hs, the normal procedure, purchase, are called, 
while in ShoppingAttack.hs, the application executes the 
malicious procedure, purchase'.

Case 1 --- Malicious program in unprotected run-time system
------------------------------------------------------------
1. Change to direcotry Insecure
2. Load the program by
   ghci ShoppingAttack.hs
3. Execute main by
   *ShoppingAttack> main

Case 2 --- Normal program in protected run-time system
------------------------------------------------------------
1. Change to directory Secure
2. Load the program by
   ghci Shopping.hs
3. Execute main by
   *Shopping> main

Case 3 --- Malicious program in protected run-time system
-----------------------------------------------------------
1. Change to directory Secure
2. Load the program by
   ghci ShoppingAttack.hs
3. Execute main by
   *ShoppingAttack> main

(Note: Case 3 takes a very long time!)



